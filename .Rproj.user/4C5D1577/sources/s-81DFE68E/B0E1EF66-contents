library(sf)
library(readxl)
library(ggplot2)
library(dplyr)
library(stringr)
library(stringdist)

#Datasource: https://opendata-esri-de.opendata.arcgis.com/datasets/affd8ace4c204981b5d32070f9547eb9_0

cases <- read_xlsx("C:/Richard/R and Python/Datasets/Fallzahlen_Kreise_04_11_2020.xlsx",sheet=5,skip=4)

kreise <- read_sf("C:/Richard/R and Python/Datasets/Kreisgrenzen_2017_mit_Einwohnerzahl/Kreisgrenzen_2017_mit_Einwohnerzahl.shp") %>%
  mutate(name=paste(ifelse(BEZ %in% c("Kreisfreie Stadt","Stadtkreis"),"SK","LK"),GEN))


cleaner <- function(vec) {
  vec %>% tolower() %>%
    str_remove("eifelkreis|regionalverband|stadtverband") %>%
    return()
}


  
fuzzy_matches <- function(clean_vec,dirty_vec) {
  control <- data.frame(original=dirty_vec)
  
  distmatrix <- stringdist::stringdistmatrix(cleaner(clean_vec),cleaner(dirty_vec),method='jw',p=0.1)
  best_fit <- apply(distmatrix,2,which.min) %>% as.integer()
  similarity <- apply(distmatrix,2,min)
  
  control$best_fit <- clean_vec[best_fit]
  control$similarity <- similarity 
  
  return(control)
}

dict <- fuzzy_matches(kreise_names,cases$LK)


cases %>%
  mutate(LK_new=plyr::mapvalues(LK,from=dict$original,to=dict$best_fit)) %>%
  left_join(kreise,by=c("LK_new"="name")) %>%
  mutate(inz_bin=cut(Inzidenz,breaks=c(-1,0,4,10,20,35,50,100,1000),
                     labels=c("0","unter 5","5 bis 10","10 bis 20","20 bis 35",
                              "35 bis 50","50 bis 100","ab 100 (Hotspot)"))) %>%
  ggplot(aes(fill=inz_bin))+geom_sf(aes(geometry=geometry))+
  scale_fill_manual(values=c("grey80","grey70","grey60","grey50",
                             "grey40","gold2","orangered1","red3"),drop=FALSE)
